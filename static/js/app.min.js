/* Attenua v2.0 - JavaScript Otimizado */

(function() {
    'use strict';

    // === CONFIGURAÇÕES GLOBAIS ===
    const CONFIG = window.ATTENUA_CONFIG || {
        HOUR_START: 9,
        HOUR_END: 19,
        INTERVAL: 30,
        API_BASE: '/api'
    };

    // === UTILITÁRIOS ===
    const Utils = {
        // Debounce para otimizar eventos
        debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        },

        // Throttle para scroll events
        throttle(func, limit) {
            let inThrottle;
            return function() {
                const args = arguments;
                const context = this;
                if (!inThrottle) {
                    func.apply(context, args);
                    inThrottle = true;
                    setTimeout(() => inThrottle = false, limit);
                }
            }
        },

        // Formatação de data
        formatDate(dateStr) {
            try {
                const date = new Date(dateStr + 'T00:00:00');
                return date.toLocaleDateString('pt-BR', {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
            } catch (e) {
                return dateStr;
            }
        },

        // Loading state
        showLoading() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('show');
        },

        hideLoading() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('show');
        },

        // Fetch com retry
        async fetchWithRetry(url, options = {}, retries = 3) {
            for (let i = 0; i < retries; i++) {
                try {
                    const response = await fetch(url, {
                        ...options,
                        headers: {
                            'Content-Type': 'application/json',
                            ...options.headers
                        }
                    });
                    
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    
                    return await response.json();
                } catch (error) {
                    if (i === retries - 1) throw error;
                    await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));
                }
            }
        }
    };

    // === LAZY LOADING DE IMAGENS ===
    const LazyLoader = {
        observer: null,

        init() {
            if ('IntersectionObserver' in window) {
                this.observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            this.loadImage(entry.target);
                            this.observer.unobserve(entry.target);
                        }
                    });
                }, {
                    rootMargin: '50px 0px',
                    threshold: 0.01
                });

                this.observeImages();
            } else {
                // Fallback para navegadores antigos
                this.loadAllImages();
            }
        },

        observeImages() {
            const images = document.querySelectorAll('img[loading="lazy"]');
            images.forEach(img => this.observer.observe(img));
        },

        loadImage(img) {
            if (img.dataset.src) {
                img.src = img.dataset.src;
                img.removeAttribute('data-src');
            }
            
            img.addEventListener('load', () => {
                img.classList.add('loaded');
            });

            img.addEventListener('error', () => {
                img.src = '/static/images/placeholder.webp';
                img.classList.add('loaded');
            });
        },

        loadAllImages() {
            const images = document.querySelectorAll('img[loading="lazy"]');
            images.forEach(img => this.loadImage(img));
        }
    };

    // === CACHE LOCAL ===
    const Cache = {
        prefix: 'attenua_v2_',
        ttl: 5 * 60 * 1000, // 5 minutos

        set(key, data) {
            try {
                const item = {
                    data: data,
                    timestamp: Date.now()
                };
                localStorage.setItem(this.prefix + key, JSON.stringify(item));
            } catch (e) {
                console.warn('Cache storage failed:', e);
            }
        },

        get(key) {
            try {
                const item = localStorage.getItem(this.prefix + key);
                if (!item) return null;

                const parsed = JSON.parse(item);
                if (Date.now() - parsed.timestamp > this.ttl) {
                    this.remove(key);
                    return null;
                }

                return parsed.data;
            } catch (e) {
                this.remove(key);
                return null;
            }
        },

        remove(key) {
            try {
                localStorage.removeItem(this.prefix + key);
            } catch (e) {
                console.warn('Cache removal failed:', e);
            }
        },

        clear() {
            try {
                Object.keys(localStorage).forEach(key => {
                    if (key.startsWith(this.prefix)) {
                        localStorage.removeItem(key);
                    }
                });
            } catch (e) {
                console.warn('Cache clear failed:', e);
            }
        }
    };

    // === GERENCIADOR DE RESERVAS ===
    const ReservationManager = {
        currentDate: null,
        currentSlot: null,
        availabilityCache: new Map(),

        init() {
            this.setupDatePicker();
            this.setupTimeGrid();
            this.bindEvents();
        },

        setupDatePicker() {
            const datePicker = document.getElementById('datePicker');
            if (!datePicker) return;

            const today = new Date().toISOString().split('T')[0];
            datePicker.value = today;
            datePicker.min = today;
            this.currentDate = today;

            datePicker.addEventListener('change', Utils.debounce((e) => {
                this.currentDate = e.target.value;
                this.currentSlot = null;
                this.updateTimeGrid();
                this.clearCabinsList();
            }, 300));
        },

        setupTimeGrid() {
            const timeGrid = document.getElementById('timeGrid');
            if (!timeGrid) return;

            this.generateTimeSlots();
            this.updateTimeGrid();
        },

        generateTimeSlots() {
            const timeGrid = document.getElementById('timeGrid');
            if (!timeGrid) return;

            timeGrid.innerHTML = '';
            
            for (let h = CONFIG.HOUR_START; h <= CONFIG.HOUR_END; h++) {
                for (let m = 0; m < 60; m += CONFIG.INTERVAL) {
                    if (h === CONFIG.HOUR_END && m > 30) break;
                    
                    const slot = `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}`;
                    const button = document.createElement('button');
                    button.textContent = slot;
                    button.className = 'time-slot';
                    button.dataset.slot = slot;
                    button.setAttribute('aria-label', `Horário ${slot}`);
                    
                    button.addEventListener('click', () => this.selectTimeSlot(slot, button));
                    timeGrid.appendChild(button);
                }
            }
        },

        async updateTimeGrid() {
            if (!this.currentDate) return;

            const buttons = document.querySelectorAll('.time-slot');
            const cacheKey = `slots_${this.currentDate}`;
            
            try {
                // Tenta cache primeiro
                let slotsData = Cache.get(cacheKey);
                
                if (!slotsData) {
                    const response = await Utils.fetchWithRetry(`${CONFIG.API_BASE}/slots/${this.currentDate}`);
                    slotsData = response.slots;
                    Cache.set(cacheKey, slotsData);
                }

                // Atualiza botões
                buttons.forEach(button => {
                    const slot = button.dataset.slot;
                    const slotData = slotsData.find(s => s.time === slot);
                    
                    button.disabled = !slotData || !slotData.has_availability;
                    button.className = 'time-slot ' + (slotData?.has_availability ? 'available' : 'unavailable');
                    
                    if (slot === this.currentSlot) {
                        button.classList.add('selected');
                    }
                });

            } catch (error) {
                console.error('Erro ao atualizar grade de horários:', error);
                buttons.forEach(button => {
                    button.disabled = true;
                    button.className = 'time-slot unavailable';
                });
            }
        },

        async selectTimeSlot(slot, button) {
            if (button.disabled) return;

            // Remove seleção anterior
            document.querySelectorAll('.time-slot.selected').forEach(btn => {
                btn.classList.remove('selected');
            });

            // Adiciona nova seleção
            button.classList.add('selected');
            this.currentSlot = slot;

            // Carrega cabines
            await this.loadAvailableCabins();
        },

        async loadAvailableCabins() {
            if (!this.currentDate || !this.currentSlot) return;

            const cabinsList = document.getElementById('cabinsList');
            const subtitle = document.getElementById('cabins-subtitle');
            
            if (!cabinsList) return;

            // Loading state
            cabinsList.innerHTML = '<div class="loading-cabins"><div class="spinner"></div><p>Carregando cabines...</p></div>';
            
            if (subtitle) {
                subtitle.textContent = `Cabines disponíveis para ${this.currentSlot}`;
            }

            const cacheKey = `cabins_${this.currentDate}_${this.currentSlot}`;

            try {
                // Tenta cache primeiro
                let cabinsData = Cache.get(cacheKey);
                
                if (!cabinsData) {
                    const response = await Utils.fetchWithRetry(`${CONFIG.API_BASE}/available/${this.currentDate}/${this.currentSlot}`);
                    cabinsData = response.cabins;
                    Cache.set(cacheKey, cabinsData);
                }

                this.renderCabins(cabinsData);

            } catch (error) {
                console.error('Erro ao carregar cabines:', error);
                cabinsList.innerHTML = `
                    <div class="error-state">
                        <div class="error-icon">⚠️</div>
                        <h3>Erro ao carregar cabines</h3>
                        <p>Tente novamente em alguns instantes</p>
                        <button class="btn btn-secondary" onclick="location.reload()">Recarregar</button>
                    </div>
                `;
            }
        },

        renderCabins(cabins) {
            const cabinsList = document.getElementById('cabinsList');
            if (!cabinsList) return;

            if (cabins.length === 0) {
                cabinsList.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-icon">😔</div>
                        <h3>Nenhuma cabine disponível</h3>
                        <p>Tente outro horário ou data</p>
                    </div>
                `;
                return;
            }

            cabinsList.innerHTML = cabins.map(cabin => `
                <div class="cabin-card">
                    <img src="/static/images/optimized/${cabin.imagem}" 
                         alt="${cabin.nome}"
                         class="cabin-image"
                         loading="lazy"
                         onerror="this.src='/static/images/placeholder.webp'">
                    
                    <div class="cabin-content">
                        <h3 class="cabin-title">${cabin.nome}</h3>
                        <p class="cabin-description">${cabin.descricao || ''}</p>
                        
                        <div class="cabin-details">
                            <span class="cabin-price">R$ ${cabin.valor_hora.toFixed(2)}/h</span>
                            <span class="cabin-capacity">👥 ${cabin.capacidade || 1}</span>
                        </div>
                        
                        <a href="/reserve/${cabin.id}/${this.currentDate}/${this.currentSlot}" 
                           class="btn btn-primary">
                            Reservar
                        </a>
                    </div>
                </div>
            `).join('');

            // Re-observa novas imagens para lazy loading
            LazyLoader.observeImages();
        },

        clearCabinsList() {
            const cabinsList = document.getElementById('cabinsList');
            const subtitle = document.getElementById('cabins-subtitle');
            
            if (cabinsList) {
                cabinsList.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-icon">🕐</div>
                        <h3>Escolha um horário</h3>
                        <p>Selecione uma data e horário acima para ver as cabines disponíveis</p>
                    </div>
                `;
            }
            
            if (subtitle) {
                subtitle.textContent = 'Selecione uma data e horário para ver as opções';
            }
        },

        bindEvents() {
            // Limpa cache quando necessário
            window.addEventListener('beforeunload', () => {
                // Cache persiste entre sessões, mas limpa dados muito antigos
                const oneHour = 60 * 60 * 1000;
                Object.keys(localStorage).forEach(key => {
                    if (key.startsWith(Cache.prefix)) {
                        try {
                            const item = JSON.parse(localStorage.getItem(key));
                            if (Date.now() - item.timestamp > oneHour) {
                                localStorage.removeItem(key);
                            }
                        } catch (e) {
                            localStorage.removeItem(key);
                        }
                    }
                });
            });
        }
    };

    // === VALIDAÇÃO DE FORMULÁRIOS ===
    const FormValidator = {
        init() {
            const forms = document.querySelectorAll('.reservation-form');
            forms.forEach(form => this.setupForm(form));
        },

        setupForm(form) {
            const inputs = form.querySelectorAll('input[required]');
            const submitBtn = form.querySelector('button[type="submit"]');

            inputs.forEach(input => {
                input.addEventListener('blur', () => this.validateField(input));
                input.addEventListener('input', Utils.debounce(() => this.validateField(input), 500));
            });

            form.addEventListener('submit', (e) => {
                if (!this.validateForm(form)) {
                    e.preventDefault();
                    return false;
                }

                // Loading state
                if (submitBtn) {
                    submitBtn.classList.add('btn-loading');
                    submitBtn.disabled = true;
                }

                Utils.showLoading();
            });
        },

        validateField(input) {
            const errorElement = document.getElementById(input.id + '_error');
            let isValid = true;
            let errorMessage = '';

            // Remove erro anterior
            input.classList.remove('invalid');
            if (errorElement) {
                errorElement.textContent = '';
                errorElement.classList.remove('show');
            }

            // Validação de campo obrigatório
            if (input.hasAttribute('required') && !input.value.trim()) {
                isValid = false;
                errorMessage = 'Este campo é obrigatório';
            }

            // Validação de email
            if (input.type === 'email' && input.value) {
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailRegex.test(input.value)) {
                    isValid = false;
                    errorMessage = 'Digite um email válido';
                }
            }

            // Validação de nome (mínimo 2 caracteres)
            if ((input.name === 'first_name' || input.name === 'last_name') && input.value) {
                if (input.value.trim().length < 2) {
                    isValid = false;
                    errorMessage = 'Mínimo 2 caracteres';
                }
            }

            // Mostra erro se inválido
            if (!isValid) {
                input.classList.add('invalid');
                if (errorElement) {
                    errorElement.textContent = errorMessage;
                    errorElement.classList.add('show');
                }
            }

            return isValid;
        },

        validateForm(form) {
            const inputs = form.querySelectorAll('input[required]');
            let isValid = true;

            inputs.forEach(input => {
                if (!this.validateField(input)) {
                    isValid = false;
                }
            });

            // Validação de checkbox de termos
            const termsCheckbox = form.querySelector('#terms');
            if (termsCheckbox && !termsCheckbox.checked) {
                isValid = false;
                const errorElement = document.getElementById('terms_error');
                if (errorElement) {
                    errorElement.textContent = 'Você deve aceitar os termos de uso';
                    errorElement.classList.add('show');
                }
            }

            return isValid;
        }
    };

    // === FLASH MESSAGES ===
    const FlashMessages = {
        init() {
            const closeButtons = document.querySelectorAll('.flash-close');
            closeButtons.forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const message = e.target.closest('.flash-message');
                    if (message) {
                        message.style.animation = 'slideOut 0.3s ease-out forwards';
                        setTimeout(() => message.remove(), 300);
                    }
                });
            });

            // Auto-hide após 5 segundos
            const messages = document.querySelectorAll('.flash-message');
            messages.forEach(message => {
                setTimeout(() => {
                    if (message.parentNode) {
                        message.style.animation = 'slideOut 0.3s ease-out forwards';
                        setTimeout(() => message.remove(), 300);
                    }
                }, 5000);
            });
        }
    };

    // === MOBILE MENU ===
    const MobileMenu = {
        init() {
            const menuBtn = document.querySelector('.mobile-menu-btn');
            const nav = document.querySelector('.nav');

            if (menuBtn && nav) {
                menuBtn.addEventListener('click', () => {
                    const isExpanded = menuBtn.getAttribute('aria-expanded') === 'true';
                    menuBtn.setAttribute('aria-expanded', !isExpanded);
                    nav.classList.toggle('show');
                });
            }
        }
    };

    // === PERFORMANCE MONITORING ===
    const Performance = {
        init() {
            // Web Vitals básico
            if ('PerformanceObserver' in window) {
                try {
                    // Largest Contentful Paint
                    new PerformanceObserver((entryList) => {
                        const entries = entryList.getEntries();
                        const lastEntry = entries[entries.length - 1];
                        console.log('LCP:', lastEntry.startTime);
                    }).observe({entryTypes: ['largest-contentful-paint']});

                    // First Input Delay
                    new PerformanceObserver((entryList) => {
                        const entries = entryList.getEntries();
                        entries.forEach(entry => {
                            console.log('FID:', entry.processingStart - entry.startTime);
                        });
                    }).observe({entryTypes: ['first-input']});

                } catch (e) {
                    console.warn('Performance monitoring not supported');
                }
            }
        }
    };

    // === INICIALIZAÇÃO ===
    document.addEventListener('DOMContentLoaded', () => {
        // Inicializa módulos
        LazyLoader.init();
        ReservationManager.init();
        FormValidator.init();
        FlashMessages.init();
        MobileMenu.init();
        Performance.init();

        // Remove loading inicial
        Utils.hideLoading();

        console.log('Attenua v2.0 initialized');
    });

    // === EXPOSIÇÃO GLOBAL ===
    window.Attenua = {
        Utils,
        Cache,
        ReservationManager,
        FormValidator
    };

})();

